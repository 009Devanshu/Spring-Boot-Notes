----------------------------------------
Configuring Your Git Name and Email
----------------------------------------

People would be able to know who did what when they will go through checkpoints. Configure Email as with the github account.
>git config --global user.name "Devanshu"
(>git config --global user.name ==> It will show the name if you have already configured the name)
We will do the same process for Email
>git config --global user.email "devg789123@gmail.com"

To override the previous name or email, just run the command again. It will override the previous ones.


-----------------------------------
Installing GitKraken
-----------------------------------
https://www.gitkraken.com/
Git Registration
Username: Devanshu
Email: devg789123@gmail.com
Password: deepthemazic



-------------------------
Navigation
-------------------------
When we open Git Bash, we are in Home directory and it is symbolized with ~
>ls 
It lists all the files and folders present in the current directory.

To open the current directory, 
>open .     (for mac)
>start .    (for windows)

ls shows all the folders and files present in current directory. If we want to know inside a particular folder in that directory
>ls <folder name>

We can also open a particular folder present in directory--
>open <folder name>     (for mac)
>start <folder name>    (for windows)

If a folder(y) is present inside a folder(x) which is present in the current directory and you want to see content present in folder y--
ls x/y



--------------------------------
pwd (Print Working directory)
--------------------------------
-------------------------------
cd (change directory)
-------------------------------
cd ..   (Go back one level)





-----------------------------------------------------------------------
Creating Files and Folders 
-----------------------------------------------------------------------
To Create File:
touch <file_name.extension_name>

We can create multiple files in one go: 
touch <file_name.extension_name> <file_name.extension_name>

To Create directory:
mkdir <folder_name>



---------------------------------------------------------
Deleting Files and Folders
---------------------------------------------------------
To Delete a file:
>rm <file_name> (This permanently deletes the file, not in recycle bin)
We can delete multiple files in one go 

To Delete a particular folder:
>rm -rf <folder_name>   (It is gone forever)

Note: ls -a (Shows all the files including hidden files)




-----------------------------------------------------------
git init and git status
-----------------------------------------------------------
git init initialize empty git repository or reinitialize an existing one. (create .git folder)
.git tracks all the history of repository.


-----------------------------------------------------------------------
A Common Early Git Mistake
-----------------------------------------------------------------------
When we do git init. Then git is going to watch everything in the currest directory as well as nested directory.
Suppose we have git repo MyFirstNovel

If we create another folder inside it, let's say Intro--
/Basics/MyFirstNovel (master)
>mkdir Intro
>cd Intro

/Basics/MyFirstNovel/Intro (master) (You can see that I did not initialize Intro, but it seems like git is tracking Intro directory also)
We can check git status

If we make another directory inside Intro, it will also be tracked.So, here is the warning--
warning: Do not initialize repo inside of a repo.
Before running git init, use git status to verify that you are not currently inside of a repo.
If we initialize inside directory again. In that case, it will be confusing and it would be like git tracking git.

Let's create a directory inside Basics and initialize that.

Conclusion: Make one repo per project.



-----------------------------------------------------------------------
The Committing Workflow Overview
-----------------------------------------------------------------------


The Basic Workflow:
----------------
Work On Stuff (Make new files, edit files, delete files etc)----->Add Changes (Group specific Changes together,in preparation of committing)---->Commit(Commit everything that was previously added)




-----------------------------------------------------------------------
Staging Changes with Git Add 
-----------------------------------------------------------------------
Let's say in our working directory, we have 7 files 
deleted team.html
modified about.html
modified about.css 
created navbar.html 
created navbar.css 
created navbar.js 
created logo.jpg

We can stage first three files together (git add team.html about.html about.css) and then commit them.
After that we can stage last four files (git add navbar.html navbar.css navbar.js logo.jpg) and then commit them.






----------------------------------------------------------
Finally, the git commit command
----------------------------------------------------------
Running 'git commit' will commit all staged changes. It also opens a text editor and prompts you for a commit message. So, write message along with 'git commit' 
>git commit -m "Your_message"



----------------------------------------------------------
The Git Log Command (And more committing)
----------------------------------------------------------
>git log 
It returns log of commits 

Note: git add . (stages all changes at once)



-----------------------------------------------------------
Git Documentation
----------------------------------------------------------
It has reference manual. Their book is great.


---------------------------------------------------
Keep Your commits Atomic
---------------------------------------------------
When possible, a commit should encompass a single feature, change or fix. In other words, try to keep each commit focussed on a single thing.
This makes it much easier to undo or rollback changes later on. It also makes your code or project easier to review.


---------------------------------------------------
Commit messages Present or Past
---------------------------------------------------
Git doc recommmends to use Imperative sentence. Someone said that people should use Imperative sentence because git sometimes generates its own message. But, the 
community is split on this debate.


--------------------------------------------------
A closer look at Git log command 
--------------------------------------------------
>git log --abbrev-commit        (We are getting small piece of hashes)
>git log --oneline

(You can go for more. Git Documentation >> reference manual >> log >> formatting_commit)



-----------------------------------------------------
Committing with a Gui
-----------------------------------------------------
First Click on Stage, Write commit and click the button. (Just Simple)



-------------------------------------------------------
Amending Commits 
-------------------------------------------------------
Suppose you just made a commit and then realized you forgot to include a file! or maybe you made a typo in the commit message that you want to correct. 
Rather than making a brand new separate commit. You can "redo" the previous commit using the --amend 

>git commit -m "some commit"
>git add forgotten_file
>git commit --amend

It will open your editor (Visual Code), where you can change your message. If not, it will be committed with previous message with new file.


-------------------------------------------
Ignoring Files 
-------------------------------------------
We can tell git which files and directories to ignore in a given repository, using a .gitignore file. This is useful for files you know you never want to commit, includi:
-Secrets, Api keys, credentials etc
-Operating system files (.DS_Store on Mac)
-Log files 
-Dependencies and packages

Create a file called .gitignore in the root of a repository. Inside the file, we can write patterns to tell Git which files and folders to ignore:
-.DS_Store will ignore files named .DS_Store
-folder_name/ will ignore entire directory
-*.log will ignore any files with the .log extension 





---------------------------------------------------
Section 6: Working With Branches
---------------------------------------------------



Note: Each commit has hashcode, reference to its parent commit and a message associated it.


------------------------------------
The Master Branch (Or is it Main?)
------------------------------------
The Master Branch: In git, we are always working on a branch. The default branch name is master. It doesn't do anything special or have fancy powers. It's just like any 
other branch.

Many people designate the master branch as their "source of truth" or the "official branch" for their codebase, but that is left to you decide.
From Git's perspective, the master branch is just like any other branch. It does not have to hold the "master copy" of your project.
    


------------------------------------
What on Earth is Head?
------------------------------------
When we write 'git log', we can see Head -> Master
HEAD is simply a pointer that refers to the current "location" in your repository. It is a reference to a branch pointer and a branch pointer is where a branch currently is.
So far, HEAD always points to the latest commit you made on the master branch, but soon we will see that we can move around and HEAD will change. 
If we make new branch, if we see, by default HEAD would be at the latest commit of that branch.




------------------------------------
Viewing Branches
------------------------------------
>git branch


------------------------------------
Creating and Switching Branches
------------------------------------
>git branch <branch-name>
Make a new branch based on the current HEAD (Where is HEAD referencing to a branch pointer of current branch).
This just creates the branch from that pointer and when you do git log in new branch, you can see HEAD referencing to commit as was referencing to in previous branch. It does not switch you to that branch (the HEAD says the same)

Once you have created a new branch, use 'git switch <branch-name>' to switch to it. 


--------------------------------------------------
Additional Option: Git checkout vs Git switch
--------------------------------------------------
git checkout does some additinal tasks. Nothing special. git switch is much simpler. That's it.


>git checkout <branch_name>

>git checkout -b <branch_name> (Make a branch and switch to it)

Use git switch with the -c flag to create a new branch AND switch to it all in one go. 
-c as short to create 

>git switch -c <branch_name>



--------------------------------------------------
Switching Branches with unstaged changes?
--------------------------------------------------
If we do any modification in a  branch(parent), We will need to stage and commit those modifications. Otherwise, we can not switch to any sub-branch of the branch. Reverse is also true since we are modifying in the existing file. But, if we create a new file in sub-branch, then we can move to its parent branch without staging and 
committing. 

$ git switch emptyplaylist
error: Your local changes to the following files would be overwritten by checkout:
        playlist.txt
Please commit your changes or stash them before you switch branches.
Aborting



---------------------------------------------------
Deleting & Renaming Branches
---------------------------------------------------

-D is short for --delete --force 
--force allow deleting the branch irrespective of its merge status.
Even if you want to delete a branch, you will have move out from that branch. You can not delete the branch in which you are already present.

If we run this command:
>git branch -d deleteMe
$ git branch -d deleteMe
error: The branch 'deleteMe' is not fully merged.
If you are sure you want to delete it, run 'git branch -D deleteMe'.

So, 
>git branch -D deleteMe (It will work)

Renaming: 
To rename a branch, we will have to go into that branch.
>git branch -m 200s


Note: To add and commit in one go. 
>git commit -a -m "la CASA the Papel"
(First It will add all the files and then commit)




-------------------------------------------------------
An Introduction To Merging 
-------------------------------------------------------
Often we want to incorporate changes from one branch to another. We can do this using the git merge command.


- We merge branches, not specific commits.
- We always merge to current HEAD branch.

To merge, follow these basic steps: 
1. Switch to or checkout the branch you want to merge the changes into (the receiving branch)
2. Use the git merge command to merge changes from a specific branch into the current branch. 

Example: to merge the bugfix branch into master 
>git switch master 
>git merge bugfix

Demonstration:

Switch to the branch 
987fac------------->235ff------------------>92faa------------------>2456
                     ^                                                ^
                     .                                                .
                     .                                                .
                     .                                                .
                   (master<-----HEAD)                              (bugfix)


After merge



                                                             (master<-----HEAD)
                                                                     .
                                                                     .
                                                                     .
                                                                     ↓
987fac------------->235ff------------------>92faa------------------>2456
                                                                     ^
                                                                     .
                                                                     .
                                                                     .
                                                                  (bugfix)



Note: To reach to the end of git log content, press downarrow.






------------------------------------------------------
Performing a fast forward merge
------------------------------------------------------

Note: 
Try to understand this logic--->
commit 9826134fbdb068cc6d376365dd192a43b02101ab (HEAD -> 200s)
Author: Devanshu <devg789123@gmail.com>
Date:   Sat Oct 28 10:06:36 2023 +0530

    a+b=c in playlist.txt

commit 732371378e965e588787678f5428025bdcec3469
Author: Devanshu <devg789123@gmail.com>
Date:   Sat Oct 28 10:05:38 2023 +0530

    modify two files

commit 7faa637e083d23a4bc5480a5c9d657ef81293d52 (emptyplaylist)
Author: Devanshu <devg789123@gmail.com>
Date:   Sat Oct 28 10:03:19 2023 +0530

    modify playlist.txt

commit 0f783a3738683b3d0425a649f534056df1c2dff5 (sideradio, master)
Author: Devanshu <devg789123@gmail.com>
Date:   Sat Oct 28 10:01:49 2023 +0530

    modify chickens.txt

commit dc1222eff204f95d6a910e570f1285d347b6309e
Author: Devanshu <devg789123@gmail.com>
Date:   Sat Oct 28 10:01:01 2023 +0530

    add two files






>git switch master
>git merge emptyplaylist

commit 7faa637e083d23a4bc5480a5c9d657ef81293d52 (HEAD -> master, emptyplaylist)
Author: Devanshu <devg789123@gmail.com>
Date:   Sat Oct 28 10:03:19 2023 +0530

    modify playlist.txt

commit 0f783a3738683b3d0425a649f534056df1c2dff5 (sideradio)
Author: Devanshu <devg789123@gmail.com>
Date:   Sat Oct 28 10:01:49 2023 +0530

    modify chickens.txt

commit dc1222eff204f95d6a910e570f1285d347b6309e
Author: Devanshu <devg789123@gmail.com>
Date:   Sat Oct 28 10:01:01 2023 +0530

    add two files







You can see whole log: 
commit 9826134fbdb068cc6d376365dd192a43b02101ab (HEAD -> 200s)
Author: Devanshu <devg789123@gmail.com>
Date:   Sat Oct 28 10:06:36 2023 +0530

    a+b=c in playlist.txt

commit 732371378e965e588787678f5428025bdcec3469
Author: Devanshu <devg789123@gmail.com>
Date:   Sat Oct 28 10:05:38 2023 +0530

    modify two files

commit 7faa637e083d23a4bc5480a5c9d657ef81293d52 (master, emptyplaylist)
Author: Devanshu <devg789123@gmail.com>
Date:   Sat Oct 28 10:03:19 2023 +0530

    modify playlist.txt

commit 0f783a3738683b3d0425a649f534056df1c2dff5 (sideradio)
Author: Devanshu <devg789123@gmail.com>
Date:   Sat Oct 28 10:01:49 2023 +0530

    modify chickens.txt

commit dc1222eff204f95d6a910e570f1285d347b6309e
Author: Devanshu <devg789123@gmail.com>
Date:   Sat Oct 28 10:01:01 2023 +0530

    add two files


(You can see Fast-forward in the message after merging)




---------------------------------
Generating Merge Commits 
---------------------------------
You are working for a few hours and you want to merge it back in to the master branch. My teammate has done work since i created my branch. So, there is a commit over master branch or ten commits that i don't have on my branch but it is on master. So, when i try to merge, it is no longer a fast forward. 
We use the same command but git may not be able to do it automatically for us. It depends upon the particulars of our commits (may be there is a conflicting information).
For example, what happens if on the master branch my partner edited line 59 of a file and on the bugfix branch i edited same line to be something else. Which one wins when there is a conflict. (Well we will address this thing in the next video). For now, we are going to show where we don't arrive at conflict and  git is able to make the merge for us automatically. So, what happens in these scenarios when it is not a fast-forward merge. Git performs a "merge commit". We end up with a new commit on the master branch. Git will prompt you for a message (to override git generated message).
 This new merge commit actually two different parent commits. (Remember: Every commit has parent) (See slides for more visualization)




----------------------------------
Oh No! Merge Conflicts!
----------------------------------
Conflicting Changes:
On one branch, somebody modified a file and on the second branch that we are merging, somebody deleted the same file.
My teammate edited line 77 of file on on the branch and I edited same line of the same file in different branch. Now, git will not automatically allow to merge these branches. We have to manually resolve them. 

How to fix this: 
>Conflict (content): Merge conflict in blah.txt 
Automatic merge failed; fix conflicts and then commit the result.

Whenever you encounter merge conflicts, follow these steps to resolve them: 
1. Open up the file(s) with merge conflict.
2. Edit the file(s) to remove conflicts. Decide which branch's content you want to keep in each conflict. Or keep the content from both. 
3. Remove the conflict "markers" in the document. 
4. Add your changes and then make a commit!

(Particular line number par agar content different h, to conflict issue ayega)


------------------------------------
Resolving Merge Conflicts 
------------------------------------





---------------------------------------
Using VSCode To resolve conflictts
---------------------------------------








































































































