Step 00: 
Great unit tests => Easier Maintenance
However, writing great units is not easy
    Applications have multiple layers
        .Each class has multiple dependencies.

How do you write classes with multiple dependencies?
    Option 1: Stubs
    Option 2: Mocks


Step 01: Setting up a spring boot project

Spring Initializer >> Create a project with no dependency.
All the tests that we will be writing in this project will be written in src/test/java --



The below starter project brings in mockito--
<dependency>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-starter-test</artifactId>
    <scope>test</scope>
</dependency>

=====================================================================================================================================================

Step 02: Understanding problems with Stubs 

src/main/java
    .business(package)
       public class SomeBusinessImpl {

        private DataService dataService;
        
        public int findTheGreatestFromAllData() {
            int[] data = dataService.retrieveAllData();
            int greatestValue = Integer.MIN_VALUE;
            for(int value:data) {
                if(value>greatestValue) {
                    greatestValue=value;
                }
            }
            return greatestValue;
        }
    }

    interface DataService{
        int[] retrieveAllData();
    }




src/test/java
    .business (package)
        SomeBusinessImplTest (class/junit test case)

        @Test
	    void test() {
		    SomeBusinessImpl businessImpl = new SomeBusinessImpl();
		    businessImpl.findTheGreatestFromAllData();
	    }

If we run it as junit test, we will get null pointer exception. Because dataService is null.
How can i solve it---

1--Add constructor in SomeBusinessImpl--
 public class SomeBusinessImpl {

        private DataService dataService;

        public SomeBusinessImpl(DataService dataService)
        {
            this.dataService = dataService;
        }        
        .
        .
        .
        }

2--Now we will create some stubs and pass into SomeBusinessImpl using constructor
    src/test/java
    .business (package)

    class SomeBusinessImplTest {

	@Test
	void findTheGreatestFromAllData_basicScenario() {
		DataServiceStub dataServiceStub = new DataServiceStub();
		SomeBusinessImpl businessImpl = new SomeBusinessImpl(dataServiceStub);
		businessImpl.findTheGreatestFromAllData();
		int result=businessImpl.findTheGreatestFromAllData();
		assertEquals(25,result);
	}
}
class DataServiceStub implements DataService{
	
	public int[] retrieveAllData() {
		return new int[] {25,15,5};
	}
}



Problems with stubs--
1- Suppose a new abstract method is added in future in DataService, then we will have to provide implementation for that method DataServiceStub.
2- Suppose we want to create other scenario--

        class SomeBusinessImplTest {

            @Test
            void findTheGreatestFromAllData_basicScenario1() {
                DataServiceStub1 dataServiceStub = new DataServiceStub1();
                SomeBusinessImpl businessImpl = new SomeBusinessImpl(dataServiceStub);
                int result=businessImpl.findTheGreatestFromAllData();
                assertEquals(25,result);
            }
            
            @Test
            void findTheGreatestFromAllData_basicScenario2() {
                DataServiceStub2 dataServiceStub = new DataServiceStub2();
                SomeBusinessImpl businessImpl = new SomeBusinessImpl(dataServiceStub);
                int result=businessImpl.findTheGreatestFromAllData();
                assertEquals(35,result);
            }
        }
        class DataServiceStub1 implements DataService{
            
            public int[] retrieveAllData() {
                return new int[] {25,15,5};
            }
        }

        class DataServiceStub2 implements DataService{
            
            public int[] retrieveAllData() {
                return new int[] {35};
            }
        }

========================================================================================================================================================

Step 03 -- Writing your first mockito test with mocks 


DataService dataServiceMock = mock(DataService.class);
We can pass interface or a class.

@Test
void findTheGreatestFromAllData_basicScenario1() {
    DataService dataServiceMock = mock(DataService.class);
    SomeBusinessImpl businessImpl = new SomeBusinessImpl(dataServiceMock);
    int result=businessImpl.findTheGreatestFromAllData();
    assertEquals(25,result);
}

It will give null pointer exception.


@Test
void findTheGreatestFromAllData_basicScenario1() {
    DataService dataServiceMock = mock(DataService.class);
    when(dataServiceMock.retrieveAllData()).thenReturn(new int[] {25,15,5});
    
    SomeBusinessImpl businessImpl = new SomeBusinessImpl(dataServiceMock);
    assertEquals(25,businessImpl.findTheGreatestFromAllData());
}

It will give green bar.

==============================================================================================================================================================


Step 04: Simplifying tests with Mockito annotations- @Mock, @InjectMocks

@ExtendWith(MockitoExtension.class)
class SomeBusinessImplTest {

	@Mock
	private DataService dataServiceMock;
	
	@InjectMocks
	private 	SomeBusinessImpl businessImpl;
	
	@Test
	void test() {

		when(dataServiceMock.retrieveAllData()).thenReturn(new int[] {25,15,5});
		int result =  businessImpl.findGreatestValue();
		assertEquals(25,result);
	}

}



==================================================================================================================================================================

Step 05: Exploring Mocks further by Mocking List interface


public class ListTest {

	@Test
	void simpleTest() {
		List listMock =  mock(List.class);
		
		//when(listMock.size()).thenReturn(3);
		
		when(listMock.size()).thenReturn(3);
		assertEquals(3,listMock.size());
		assertEquals(3,listMock.size());
		assertEquals(3,listMock.size());
	}
	
	@Test
	void multipleReturns() {
		List listMock =  mock(List.class);
		
		//when(listMock.size()).thenReturn(3);
		
		when(listMock.size()).thenReturn(1).thenReturn(2);
		assertEquals(1,listMock.size());
		assertEquals(2,listMock.size());
		assertEquals(2,listMock.size());
		assertEquals(2,listMock.size());

	}
	
	@Test
	void specificParameters() {
		List listMock =  mock(List.class);
		
		//when(listMock.size()).thenReturn(3);
		
		when(listMock.get(0)).thenReturn("SomeString");
		assertEquals("SomeString",listMock.get(0));
		assertEquals(null,listMock.get(1));
		

	}
	
	@Test
	void genericParameters() {
		List listMock =  mock(List.class);
		
		//when(listMock.size()).thenReturn(3);
		
		when(listMock.get(Mockito.anyInt())).thenReturn("SomeOtherString");
		assertEquals("SomeOtherString",listMock.get(0));
		assertEquals("SomeOtherString",listMock.get(1));
		

	}
}
