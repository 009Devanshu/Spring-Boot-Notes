Jpa provides JPQL, Criteria Query, NativeQuery

----------------------------------------------------------------
Step 01: Create a JPA project with H2 and Spring Boot
----------------------------------------------------------------
Dependencies- web,jpa,H2





---------------------------------------------------------------
Step 02: Create Jpa Entity Course
---------------------------------------------------------------
Define class Course. Annotate it with @Entity.
Define id, name
id is annotated with @Id and @GeneratedValue.
Define one argument constructor for name. One Default construtor.
Define getter method for id. Define getter and setter method for name.




-----------------------------------------------------------------
Step 03: Create findById using JPA Entity Manager
---------------------------------------------------------------

We will use EntityManager in CourseRepository class which provides various methods like find, save (to insert or update), remove. CourseRepository is to access database.

@Repository
public class CourseRepository{
	
	@Autowired
	EntityManager em;
	
	public Course findById(Long id) {
		return em.find(Course.class, id);
	}
	
}

In main class, we will use CommandLineRunner to print the detail on console. We are also using Logger instead of System.out.println() because System.out.println() is not
recommended in production.

@SpringBootApplication
public class DemoApplication implements CommandLineRunner{

	private Logger logger  = LoggerFactory.getLogger(this.getClass());
	
	@Autowired
	private CourseRepository repository;
	
	public static void main(String[] args) {
		SpringApplication.run(DemoApplication.class, args);
	}

	@Override
	public void run(String... args) throws Exception {
		
		Course course=repository.findById(10001L);
		
		logger.info("Course 10001 ->{}"+course);
	}

}


We already have inserted a row in course table in h2 database through data.sql---
insert into course(id,name) values(10001,'JPA in 50 steps');

application.properties--
spring.jpa.defer-datasource-initialization=true              (It will create Entity in database table first.)



----------------------------------------------------------------------------------
Step 04: Configuring application.properties to enable H2 console and logging
----------------------------------------------------------------------------------

# Enabling h2 console
spring.h2.console.enabled=true


# Turn statistics on
spring.jpa.properties.hibernate.generate_statistics=true
logging.level.org.hibernate.stat=debug

# Show all queries
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.format_sql=true					(Not recommended in production)
logging.level.org.hibernate.type=trace							(I want to see what parameters are being sent)


spring.jpa.defer-datasource-initialization=true




---------------------------------------------------------------------------------
Step 05: Writing Unit Test for findById method
----------------------------------------------------------------------------------
src/test/java
	com.in28minutes.jpa.hibernate.demo;
		@SpringBootTest
		class DemoApplicationTests {

			@Test
			void contextLoads() {
			}

		}

	com.in28minutes.jpa.hibernate.demo.repository
		@SpringBootTest
		class CourseRepositoryTest {

			
			@Autowired
			CourseRepository repository;
			@Test
			void findById_basic() {
				Course course =  repository.findById(10001L);
				assertEquals("JPA in 50 steps",course.getName());
			}

		}



----------------------------------------------------------------------------
Step 06: Writing a deleteById method to delete an Entity
-----------------------------------------------------------------


	







		














