Software Engineering follow these steps: 
development----(commit on git by all development teams)------->build--------->test---------->deploy 
(We need to follow these steps multiple times on demand, we need to follow these steps in multiple environments like dev, qa and production)
It is very challenging to build and deploy manually. 

We can automate build and deeply by using various tools like Jenkins. 
Jenkins automate build and deployment process. 

Understanding Multiple Environments:-
------------------------------------------
1. Dev Env:- Project development 
2. Q.A:- Quality Assurance Environment
         Testing Environment

3. UAT env:- User Acceptance Testing 
4. Pilot Env (Pre production environment)
             Performance testing 

5. Production Env: Live..


What is CI/CD pipeline?
Ans: see image on official site of redhat. 
(Continuous Deployment can be automated instead of human interaction)

Requirement:-
Java app, Tomcat Server, Jenkins

CI/Cd implementation process:-
-----------------------------------
Downlaod tomcat 10
Add tomcat server in eclipse and run it. 
Create java application:-
    Create Maven Project.
Now we need to add tomcat library in the project...
Right click on project>> properties>> Java build Path>> Add library>> Server Runtime>> Select Tomcat Server 

Now, run your programme,
It is being deployed using eclipse. But, in different environments, this eclipse would not be there. 


Maven Build..
maven clean install>> war file
Now, we will deploy this war file manually on tomcat server.
(Stop the server on eclipse)
Start the tomcat server using startup batch file. (http://localhost:8080---> We can see a home page)
copy war file from application target folder and paste into webapps folder of tomcat server. (..8080/javaapp---> We can see access)

Another way to deploy:
Delete War file and its extracted folder from webapps of tomcat server.
Go to server homepage and go into manager app. 
We need username and password:-
    -- Go into config file,
    -- In users tag, <user username="" password="" roles="manager-gui,manager-script"/>
Deploy war file by choosing the file and boom.
Now, you can access http://localhost:8080/javaapp or click on the application folder on /manager gui.

It is all manual process. But, we want to automate it after test and merge.
-------------------------------------------------------------------------------------------------------------------

----------------------------------------------------------------------------------------------
Automate with Jenkins
----------------------------------------------------------------------------------------------
Although you can download different types of files, we download Generic Java Package (.war file)
Both tomcat server and Jenkins run on port 8080. We will have to run on different ports.
Tomcat>> config>> connector port -- 8081
Runt tomcat server (undeploy your java app)
Run downloaded Jenkins.war file
    >> java -jar jenkins.war and follow the steps for setup
Once setup is done, whenever you want to run jenkins. Again java -jar <war-file>. Enter username and password and you are logged in.

We can Install plugins like 'deploy to container' and maven integration.

>> Manage Jenkins>> Tools 

Now, configure jenkins
-------------------------
Create a freestyle Project:-
--------------------
Home>> Create a job
configure
    POLL SCM 
    github url
    maven   (build stem) 
        clean install 
    post build step 
------------------------------------------------------------------------------------------


Moving to work on AWS cloud
-----------------------------
Launch ec2 instance
    Select platform (Operating system)
connect to ec2 

sudo su  (login with super user)
apt update 
apt install openjdk-17-jdk
apt install tomcat 9
systemctl status tomcat9 (To check the status)
systemctl start tomcat9 (If not active)


Set Java_home path for java to run tomcat server--
which java 
/usr/bin/java 



**********************************************************************************
You can set your JAVA_HOME in /etc/profile as Petronilla Escarabajo suggests. But the preferred location for JAVA_HOME or any system variable is /etc/environment.

Open /etc/environment in any text editor like nano or gedit and add the following line:

JAVA_HOME="/usr/lib/jvm/open-jdk"
(java path could be different)

Use source to load the variables, by running this command:

source /etc/environment
Then check the variable, by running this command:

echo $JAVA_HOME
Update
**********************************************************************************




*********************************************************************************8

(
   Operating system : Ubuntu 22.04

Installing Java : apt-get install openjdk-17-jdk

Adding JAVA_HOME : nano /etc/environment

-> JAVA_HOME="/usr/lib/jvm/java-17-openjdk-amd64"

Then

Installing Tomcat9 with : apt-get install tomcat9

Starting tomcat9 with : service tomcat9 start

An error is following stating JAVA_HOME is not found which is incorrect.

You need to find the script /usr/libexec/tomcat9/tomcat-locate-java.sh

Which actually seach for the versions 11 to 8 of Java.

Updating the script this way adding the version 17 is solving the issue :

    find_jdks()
{
    for java_version in 17 11 10 9 8
    do

}
)
**************************************************************

Now, come to ec2 instance:-
Our tomcat is running on port number 8080, we will allow this port in ec2 instance. For this
Add an inbound rule 
    Security
    Inbound rules 
    Add 
        Custome IP 
        port 8080
        Access from anywhere IPv4
copy IPv4 port of ec2 instance and 
port_name:8080  (In browser)

Now, we want to change port from 8080 to 8081. 
First of all, stop tomcat ---> systemctl stop tomcat9
vim /etc/tomcat9/server.xml             (Edit now)
Edit Inbound rule and follow the same process. 


Now, let's install jenkins for our ec2 instance::
Use Google to install jenkins
Copy the path and run 
vim path_name in powershell and paste it in jenkins ui and follow the steps. 

Now, add user in tomcat-users.xml
cd /var/lib/tomcat9/
/var/lib/tomcat9# ls
    cd conf
    ls
    You will get all the files including tomcat-users.xml
vim tomcat-users.xml
(or directly--> vim /var/lib/tomcat9/conf/tomcat-users.xml)

systemctl restrat tomcat9


Now, come to Jenkins:-
add plugins ---> maven integration and deploy to container
tools---> add jdk 
(How would you give JAVA_HOME path to add java in tool
    in powershell---> echo $JAVA_HOME (It will give location of JAVA_HOME path)
    /usr/lib/jvm/java-17-openjdk-amd64
)
And for maven--> automatic install (We are talking about tools. Haha do you remember)
---------------------------------------------------------------------------------------------------

Now, creating First project:-
In build-step, we are using 'execute shell' (Since we are using Ubuntu)
    echo "this is testing jenkins command"

Lets create a new project for java (A simple java program)
For Git:- add url 
Build steps
    javac Main.java 
    java Main 


Another Prject:
In build step:  
    top level maven target
        clean install 
post build step 
 add container 
    war file--> target/*.war 
    contextpath 
    tomcat url:- awsurl:8081 (or whatever)
   And you got fucking exception. 
    apt install tomcat9-admin  (But, first sudo su (I don't know why it is needed sometimes.))
    Restart the server 
        Now you can access:- url:8081/manager 


If ip address of aws is changing again, associate elastic ip address to your running ec2 instance:-
allocate elastic ip address and then associate that ip address to your running ec2 instance.
Now, you can use ip address given by associated elastic ip address.



---------------------------------------------------------------------------------
**************************************
Now, working with CI/CD pipeline
**************************************
Till now, we were creating freestyle project and doing there some manual work.
I mean, we will create script now.
We can create two types of script 
    declarative 

(We can write script in groovy aaayen!!)   (we will not create freestyle project, we will manually write steps)
Choose pipeline project 
IN pipeline section, select pipeline script and choose simple script. 
pipeline{
    agent any
    stages{
        stage("build"){
            
            steps{
                sh 'echo "Building Applications"'
            }
            
        }
        stage("test"){
            
            steps{
                sh 'echo "Testing Applications"'
            }
            
        }
        stage("deploy"){
            
            steps{
                sh 'echo "Deploying Applications"'
            }
            
        }
    }
}
Apply save and build.

    
Another project  
    Create a folder in local drive (PIPELINE-EXAMPLE-GIT)
        Test.java  (Some Sop statements in main method)
        Jenkinsfile
            Write pipeline script in this file 
            pipeline{
            agent any 
            stages{
                stage("compile"){
                steps{
                    sh 'javac Test.java'
                }
                }
                stage("run"){
                steps{
                    sh 'java Test'
                }
                }
            }
        }
    Select poll scm 
    In pipeline section     
        pipeline script from scm and give url of git. 
        appy, save and build. 

    For post build steps:-
        pipeline{
            agent any 
            stages{
                ...
                ...
            }
            post{
                always{
                    sh 'echo "always"'
                }
                success{
                    sh 'echo "success"'
                }
                failure{
                    sh 'echo "failure"'
                }
            }
        }            


We can also add environment
pipeline{
    ...
    environment{
        VERSION_NAME="1.34"
    }
    stages{
        ..
        steps{
            sh 'echo "${VERSION_NAME}"'
        }
        ...
    }
    ..
}








(If you are getting error while building war file, add the plugin:-
<plugin>
    <groupId>org.apache.maven.plugins</groupId>
    <artifactId>maven-war-plugin</artifactId>
    <version>3.4.0</version>
</plugin>)

-------------------------------
























